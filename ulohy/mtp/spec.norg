@document.meta
        title: spec
        description: MTP protocol specification.
        author: zir
        categories: 
        created: 2021-11-25
        version: 0.1
@end

* Prerequisites
  MTP is a TCP file file transfer protocol for transferring memes. A single `Meme` consists of the actual `image`, authors `nick` and `password`, a `NSFW` tag and a text with with the meme's `description`.

 ** Communication
    MTP communication is handle through two `channels`, the `Main` channel and the `Data` channel. It's also handled in 3 phases.
  *** 1. Initialization phase
      - Clients establishes TCP connection with the server with the following message: `C MTP V:1.0`.
      - Server responds with: `S MTP V:1.0`.
      - Client then chooses a `nick`, with which the clients wishes to be identified as and sends the following message: `C <nick>`.
      - Server then generates a security `token` which is then sent back to the client: `S <token>`.
      - Server creates opens the `Data` channel and sends the clients the following message: `S <port>` where port is the port to the open data channel(`IP` stays the same).
  *** 2. Transfer phase
      - Firstly, client establishes a TCP connection with the `Data` channel, sending the following message: `C <nick>`.
      - Server then responds with: `S <token>` which has to be the same as the one sent in the first phase
      - Then, server sends: `S REQ:<type>`. `type` can be any of the following values: `meme`, `description`, `isNSFW`, `password`. The data here is for `text` for `password` and `description` `true` or `false` for `isNSFW`
      and a *base64* encoded /png/ or /jpeg/ image for the `meme` type.
      - Client in response, sends the required data in the format of: `C <data>` where `<data>` is the actual data requested by the previous server message.
      - After this the serer sends an acknowledgement message: `S ACK:<dataLenght>` where `<dataLenght>` is the number of received characters.
      - After this the server either asks for more data with `S REQ:...` or ends the communication with: `S END:<dtoken>` which is another token which is different from the `token` previously sent.
      - After this the `Data` channel is closed.
  *** 3. Final phase
      - This phase happens on the `Main` channel. Server sends: `S <msglen>` where `<msglen>` is the all sum of all the data sent by the client.
      - Client responds with: `C <dtoken>` which is the security token which the client received in the end of the *second phase*.
      - Server then ends the communication with: `S ACK`.
    If either the server or the client detect an error, they send: `E <error>` where `<error>` is a legible description of the error.

 ** Encoding
    All messages are encoded using [Netstrings](https://cr.yp.to/proto/netstrings.txt), which means all messages are encoded in the following format `<message_lenght>:<messsage>,`, where `<message_lenght>` is the number
    of characters of the message. This allows for sending 2 messages in a single packet, for example `5:Hello,5:World,` can be sent like so in a single packet. Messages can also be split into multiple packets like so: 
    `40:Memes are the be` and `st communication medium!,`.

* Todo
 ** Implemenent MTP
    - [ ] get the basic implementation up and running
	- [ ] class MTP
	- [ ] class Channel for handling communication
	- REWRITE
 ** Graphical UI
    - [ ] create a graphical ui
 ** Documentation
    - [ ] write nice and readable docs
 ** Standards
    - [ ] adhere to all `pycodestyle` standards
 ** Code TODOS
    - [ ] Fix this function(implementation.Channel.receive) to also check for errors with received data length.
    - [ ] *implementation.Channel.receive* should be able to recieve until a while message is received.
    - [ ] Implement error responese to the server from the client.
    - [ ] Implement *implementatoin.Channel.send_error*.
